package main

import (
	"fmt"
	"strconv"
)

func minNumber(nums []int) string {
	// nums可能会出现重复数字
	sort(nums, 0, len(nums)-1)
	str := ""
	for _, v := range nums {
		str += strconv.FormatInt(int64(v), 10)
	}
	return str
}

func sort(nums []int, start, end int) {
	if start >= end {
		return
	}
	mid := patition(nums, start, end)
	sort(nums, start, mid-1)
	sort(nums, mid+1, end)
}

func patition(nums []int, start, end int) int {
	i, j := start, start
	for ; i < end; i++ {
		if less(nums[i], nums[end]) {
			nums[i], nums[j] = nums[j], nums[i]
			j++
		}
	}
	nums[j], nums[end] = nums[end], nums[j]
	return j
}

// 比较a,b大小
// a+b < b+a
func less(a, b int) bool {
	if a == 0 {
		return true
	}
	if b == 0 {
		return false
	}
	f := func(a, n int) int {
		for i := 0; i < n; i++ {
			a *= 10
		}
		return a
	}
	return f(a, getCount(b))+b < f(b, getCount(a))+a
}

// 获取位数
func getCount(num int) int {
	c := 0
	for num != 0 {
		num /= 10
		c++
	}
	return c
}

func main() {
	// fmt.Println(less(111, 222))
	// fmt.Println(less(222, 111))
	// fmt.Println(less(3, 329))
	fmt.Println(less(0, 1))
	// fmt.Println(less(31, 329))
	// fmt.Println(less(33, 3329))
	// fmt.Println(less(3, 3329))
	// f := func(nums []int) {
	// 	return
	// 	// sort(nums, 0, len(nums)-1)
	// 	fmt.Println(minNumber(nums))
	// }
	// f([]int{1, 2, 3})
	// f([]int{99, 1, 2, 3, 2, 1, 19})
}

/*

	3 329  --> 3293
	3 349  --> 3349
	33 329 --> 32933
	31 329 --> 31329

	33 3329 --> 332933
	3 3329 --> 33293


	1234 12345 --> 123412345

	1239 12395 --> 123912395

	9239 92395 -->
*/

// [824,938,1399,5607,6973,5703,9609,4398,8247]
// 输出
// "1399439856075703697382482479389609"
// 预期结果
// "1399439856075703697382478249389609"

// 8248247
// 8247824

// 923992395
// 923959239

// [9051,5526,2264,5041,1630,5906,6787,8382,4662,4532,6804,4710,4542,2116,7219,8701,8308,957,8775,4822,396,8995,8597,2304,8902,830,8591,5828,9642,7100,3976,5565,5490,1613,5731,8052,8985,2623,6325,3723,5224,8274,4787,6310,3393,78,3288,7584,7440,5752,351,4555,7265,9959,3866,9854,2709,5817,7272,43,1014,7527,3946,4289,1272,5213,710,1603,2436,8823,5228,2581,771,3700,2109,5638,3402,3910,871,5441,6861,9556,1089,4088,2788,9632,6822,6145,5137,236,683,2869,9525,8161,8374,2439,6028,7813,6406,7519]
// 输出
// "101410891272160316131630210921162264230423624362439258126232709278828693288339334023513700372338663910394639639764088428943453245424555466247104787482250415137521352245228544154905526556556385731575258175828590660286145631063256406678768046822683686171007107219726572727440751975277584771781378805281618274830883083748382859185978701871877588238902898589959051952595569579632964298549959"
// 预期结果
// "101410891272160316131630210921162264230423624362439258126232709278828693288339334023513700372338663910394639639764088428943453245424555466247104787482250415137521352245228544154905526556556385731575258175828590660286145631063256406678768046822683686171007107219726572727440751975277584771781378805281618274830830883748382859185978701871877588238902898589959051952595569579632964298549959"

// 830
// 8308

// 8308830
// 8308308
